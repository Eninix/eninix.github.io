{
    "version": "https://jsonfeed.org/version/1",
    "title": "Eninix's Blog • All posts by \"github\" category",
    "description": "尔曹身与名俱灭，不废江河万古流。",
    "home_page_url": "https://eninix.top",
    "items": [
        {
            "id": "https://eninix.top/archives/fe8402c1.html",
            "url": "https://eninix.top/archives/fe8402c1.html",
            "title": "Github-Cli的使用",
            "date_published": "2022-11-12T06:57:54.000Z",
            "content_html": "<center>Github-Cli是github官方推出的命令行工具，可以用来在命令行上快捷的操作github.</center>\n\n<span id=\"more\"></span>\n\n<h1 id=\"1-官网及下载地址与安装手段\"><a href=\"#1-官网及下载地址与安装手段\" class=\"headerlink\" title=\"1.官网及下载地址与安装手段\"></a>1.官网及下载地址与安装手段</h1><p><a href=\"https://cli.github.com/\">官网：</a><a href=\"https://cli.github.com/\">https://cli.github.com/</a></p>\n<p><a href=\"https://github.com/cli/cli#installation\">官方对各个系统的下载教程：</a><a href=\"https://github.com/cli/cli#installation\">https://github.com/cli/cli#installation</a></p>\n<p><a href=\"https://cli.github.com/manual/\">官方github-cli指令指南：</a><a href=\"https://cli.github.com/manual/\">https://cli.github.com/manual/</a></p>\n<h1 id=\"2-首次运行\"><a href=\"#2-首次运行\" class=\"headerlink\" title=\"2.首次运行\"></a>2.首次运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh auth login</span><br></pre></td></tr></table></figure>\n\n<p>执行命令后，按照提示可选择打开浏览器输入验证码进行验证登录操作，也可以选择使用私人token进行登录。<del>注意：英语不太好的，可以使用翻译软件翻译。</del></p>\n<p>在这里登录后，使用git push时，即使是https方式克隆的仓库，也可以不输入密码就进行push（这条笔者只在linux上实验过，未在网上找到其他系统的资料）</p>\n<h1 id=\"3-基础操作\"><a href=\"#3-基础操作\" class=\"headerlink\" title=\"3.基础操作\"></a>3.基础操作</h1><h2 id=\"3-1克隆仓库（gh-repo-clone）\"><a href=\"#3-1克隆仓库（gh-repo-clone）\" class=\"headerlink\" title=\"3.1克隆仓库（gh repo clone）\"></a>3.1克隆仓库（gh repo clone）</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh repo clone 用户名/库名</span><br></pre></td></tr></table></figure>\n\n<p>使用该条命令，会在当前操作目录下，建立一个一库名命名的文件夹，即为你的github库。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130007794.png\" alt=\"image-20220117004819632\"><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130008360.png\" alt=\"image-20220117004906276\"></p>\n<h2 id=\"3-2打开当前github库的网页\"><a href=\"#3-2打开当前github库的网页\" class=\"headerlink\" title=\"3.2打开当前github库的网页\"></a>3.2打开当前github库的网页</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh browse</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130011915.png\" alt=\"image-20220117005110529\"></p>\n<p>执行完后，自动打开了我的浏览器。</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130012955.png\" alt=\"image-20220117005229390\"></p>\n<h2 id=\"3-3查看某个库的README\"><a href=\"#3-3查看某个库的README\" class=\"headerlink\" title=\"3.3查看某个库的README\"></a>3.3查看某个库的README</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh repo view 用户名/库名</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130012540.png\" alt=\"image-20220117011826651\"></p>\n<h1 id=\"4发布pull-requests\"><a href=\"#4发布pull-requests\" class=\"headerlink\" title=\"4发布pull requests\"></a>4发布pull requests</h1><h2 id=\"4-1先在分支typo-随便改一下文件，并push\"><a href=\"#4-1先在分支typo-随便改一下文件，并push\" class=\"headerlink\" title=\"4.1先在分支typo,随便改一下文件，并push\"></a>4.1先在分支typo,随便改一下文件，并push</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130012366.png\" alt=\"image-20220117005734353\"></p>\n<h2 id=\"4-2使用gh-pr-creat创建一个pull-requests\"><a href=\"#4-2使用gh-pr-creat创建一个pull-requests\" class=\"headerlink\" title=\"4.2使用gh pr creat创建一个pull requests\"></a>4.2使用gh pr creat创建一个pull requests</h2><p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130013549.png\" alt=\"image-20220117010038153\"></p>\n<p>这里我们可以看到，创建了一个编号5的pr</p>\n<p>在库主页上也可以看到:</p>\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130013150.png\" alt=\"image-20220117010155504\"></p>\n<h2 id=\"4-3合并pull-requests\"><a href=\"#4-3合并pull-requests\" class=\"headerlink\" title=\"4.3合并pull requests\"></a>4.3合并pull requests</h2><p>可以直接在网页上操作，当然也可以使用gh pr merge命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh pr merge --auto</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://cdn.jsdelivr.net/gh/Eninix/the-bed/202211130013454.png\" alt=\"image-20220117010518509\"></p>\n<h1 id=\"5-发布issues\"><a href=\"#5-发布issues\" class=\"headerlink\" title=\"5.发布issues\"></a>5.发布issues</h1><p>操作和pr操作类似</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gh issue create  按照提示操作来创建一个issues，这里假设编号为 7</span><br><span class=\"line\">gh issue list  列出所有issues</span><br><span class=\"line\">gh issue close 7  关闭 5号issues</span><br><span class=\"line\">gh issue reopen 7  重新打开 5号issues</span><br><span class=\"line\">gh issue comment 7  评论 5号issues</span><br><span class=\"line\">gh issue view 7  查看 5号issues内容</span><br><span class=\"line\">gh issue edit 7  编辑</span><br><span class=\"line\">gh issue delete 7  删除</span><br><span class=\"line\">gh issue status  查看自己发布的issues</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-写在最後\"><a href=\"#6-写在最後\" class=\"headerlink\" title=\"6.写在最後\"></a>6.写在最後</h1><p>常用操作大概就这些，github-cli的纯命令行操作还是很好用的。gthub-cli配合git使用还是挺方便的。</p>\n<p><a href=\"https://cli.github.com/manual/\">https://cli.github.com/manual/</a> 这里还有更多操作。<del>不过是英语</del></p>\n",
            "tags": [
                "git",
                "github"
            ]
        },
        {
            "id": "https://eninix.top/archives/2e742d51.html",
            "url": "https://eninix.top/archives/2e742d51.html",
            "title": "Git的使用",
            "date_published": "2022-11-12T06:45:52.000Z",
            "content_html": "<center>一些常用的git指令，和.gitignore文件的使用方法。</center>\n\n<span id=\"more\"></span>\n\n\n\n<h1 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h1><p><a href=\"https://git-scm.com/downloads\">下载地址</a>：<a href=\"https://git-scm.com/downloads\">https://git-scm.com/downloads</a></p>\n<h1 id=\"2-首次运行\"><a href=\"#2-首次运行\" class=\"headerlink\" title=\"2.首次运行\"></a>2.首次运行</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> 设置全局用户名和邮箱地址，建议与自己的github帐号一致。</span><br><span class=\"line\">git config --global user.name &quot;用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-基础指令\"><a href=\"#3-基础指令\" class=\"headerlink\" title=\"3.基础指令\"></a>3.基础指令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init  初始化一个仓库，或者用下面的clone一个仓库</span><br><span class=\"line\">git clone  后接https地址,可以克隆仓库</span><br><span class=\"line\">git add  将文件添加到缓存区，进入待提交状态</span><br><span class=\"line\">git commit -m &quot;注释&quot;  提交当前缓存区所有文件为一个版本</span><br><span class=\"line\">git status  查看项目的当前状态</span><br><span class=\"line\">git log  查看当前版本及以前版本的日志,可获取版本号</span><br><span class=\"line\">git log --pretty=oneline  同上,但每个版本单行显示</span><br><span class=\"line\">git reset --hard 版本号  回到曾经的版本</span><br><span class=\"line\">git reflog  查看历史日志,可获取版本号</span><br><span class=\"line\">git push  上传至线上仓库</span><br><span class=\"line\">git pull  从线上仓库同步</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-分支指令\"><a href=\"#4-分支指令\" class=\"headerlink\" title=\"4.分支指令\"></a>4.分支指令</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch  (查看分支)</span><br><span class=\"line\">git branch 分支名  (创建分支)</span><br><span class=\"line\">git checkout 分支名  (切换分支)</span><br><span class=\"line\">git branch -d 分支名  (删除分支)</span><br><span class=\"line\">git merge 需要被分支名  (合并分支)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-文件“-gitigenore”\"><a href=\"#5-文件“-gitigenore”\" class=\"headerlink\" title=\"5.文件“.gitigenore”\"></a>5.文件“.gitigenore”</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/文件夹名/ =&gt; (忽略整个文件夹)</span><br><span class=\"line\">*.zip =&gt; (忽略所有.zip文件)</span><br><span class=\"line\">/文件夹名/文件名.后缀 =&gt; (忽略某个具体文件)</span><br><span class=\"line\">文件名.后缀 =&gt; (不忽略某个具体文件)</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "git"
            ]
        }
    ]
}